0
00:00:05,454 --> 00:00:09,330
Last time we saw the five primitive variable types in JavaScript.

1
00:00:09,330 --> 00:00:12,030
But each of those only allows us to hold one value.

2
00:00:13,060 --> 00:00:15,435
Sometimes we want to have a collection of values.

3
00:00:15,435 --> 00:00:18,280
Maybe we want them in some particular order.

4
00:00:18,280 --> 00:00:22,124
Maybe we want a collection of key value pairs that are associated or

5
00:00:22,124 --> 00:00:25,225
combined into something semantically meaningful.

6
00:00:25,225 --> 00:00:29,890
In this lesson, we'll see how to address those two concerns using arrays and

7
00:00:29,890 --> 00:00:31,250
objects.

8
00:00:31,250 --> 00:00:36,380
As in many other programming language, JavaScript has a notion of an array.

9
00:00:36,380 --> 00:00:39,499
An array is used to store a list of values in a single variable.

10
00:00:40,600 --> 00:00:43,340
But unlike many other programming languages,

11
00:00:43,340 --> 00:00:47,170
within the array the values don't have to be all the same type.

12
00:00:47,170 --> 00:00:52,606
In this case we've declared a variable called my array that contains three

13
00:00:52,606 --> 00:00:58,054
elements, a string called cars, a number 12 and a Boolean value false.

14
00:00:58,054 --> 00:01:03,105
I can access individual elements of the array using the standard

15
00:01:03,105 --> 00:01:07,406
array notation in this case I can get element number one

16
00:01:07,406 --> 00:01:12,193
using a zero based index and that will return the value 12.

17
00:01:12,193 --> 00:01:18,409
I can also set element number two of the array, again using the zero based index,

18
00:01:18,409 --> 00:01:23,600
for instance I can set element number two to the value true.

19
00:01:23,600 --> 00:01:29,160
Now it's worth pointing out here, that in this case I got a number, in this case

20
00:01:29,160 --> 00:01:34,910
I used a boolean, but I'm able to change the type, of the element in the array,

21
00:01:34,910 --> 00:01:38,549
just like I'm able to change the type of any variable in JavaScript.

22
00:01:39,960 --> 00:01:42,790
Last, if I wanna know how many elements are in the array,

23
00:01:42,790 --> 00:01:47,560
I can use its length property in this case, it would return three.

24
00:01:47,560 --> 00:01:49,960
Now in many other programming languages,

25
00:01:49,960 --> 00:01:53,569
you have to be careful about how you use the indices to the array.

26
00:01:53,569 --> 00:01:56,674
If you use an index that's too big, you might get an exception, or

27
00:01:56,674 --> 00:01:58,860
you might overwrite some other data.

28
00:01:58,860 --> 00:02:04,290
If you use an index that's negative, you might again, get some unexpected behavior.

29
00:02:05,570 --> 00:02:09,820
In JavaScript, when I'm reading an array by the index, and

30
00:02:09,820 --> 00:02:14,420
I use an index that's out of bounds, that's negative or

31
00:02:14,420 --> 00:02:19,600
greater than the size, then what I will get back, is undefined.

32
00:02:20,770 --> 00:02:25,149
In this example I have three elements in my array.

33
00:02:25,149 --> 00:02:31,030
When I try to print element number 4, remember these are zero-based indices.

34
00:02:31,030 --> 00:02:32,410
So 0, 1, 2.

35
00:02:32,410 --> 00:02:34,590
There is no element number 4.

36
00:02:34,590 --> 00:02:37,780
I would just get back undefined.

37
00:02:37,780 --> 00:02:42,380
And in this case, when I try to access element number negative 9 Again,

38
00:02:42,380 --> 00:02:44,660
we'll just get back undefined.

39
00:02:44,660 --> 00:02:45,230
No error,

40
00:02:45,230 --> 00:02:50,480
no exception, nothing like that, just JavaScript saying, there's no value there.

41
00:02:50,480 --> 00:02:53,630
Now the rules for writing are slightly different.

42
00:02:53,630 --> 00:02:58,270
If I'm writing to an array, and the index is out of bounds, it will,

43
00:02:58,270 --> 00:03:00,770
in fact, add it to the array.

44
00:03:00,770 --> 00:03:04,500
Here we have an array, again, of three elements, cat, dog and banana.

45
00:03:04,500 --> 00:03:09,890
These are zero based indices, so 0, 1, 2.

46
00:03:09,890 --> 00:03:13,657
When I try to access element number four but I'm writing to it,

47
00:03:13,657 --> 00:03:17,583
I'm not reading it, I'm writing it, I'm setting it to panda.

48
00:03:17,583 --> 00:03:19,580
It actually will add it to the array.

49
00:03:20,810 --> 00:03:24,220
And if I go and ask for element number 4, then I will get back panda.

50
00:03:24,220 --> 00:03:26,630
But what about element number 3?

51
00:03:26,630 --> 00:03:31,030
Well, there is no element number 3, it doesn't put any value there.

52
00:03:31,030 --> 00:03:32,650
It's still undefined.

53
00:03:32,650 --> 00:03:37,500
Now, if the index is negative, we'll still have a mapping.

54
00:03:37,500 --> 00:03:40,850
From that index even though it's a negative number to that element.

55
00:03:41,860 --> 00:03:45,885
In this case, I'm setting element -5 to elephant.

56
00:03:45,885 --> 00:03:51,297
And when I print element -5, it will still remember that -5 is mapped to,

57
00:03:51,297 --> 00:03:54,610
if you will, the string elephant.

58
00:03:54,610 --> 00:03:57,831
How many elements are now in a?

59
00:03:57,831 --> 00:03:59,651
It's 5.

60
00:03:59,651 --> 00:04:03,800
It's the three that we originally had, cat, dog and banana.

61
00:04:03,800 --> 00:04:07,260
Plus the two that we added in this example, panda and elephant.

62
00:04:08,430 --> 00:04:10,340
When I use console.log and

63
00:04:10,340 --> 00:04:15,580
pass at the array, it prints the first three elements as we expected.

64
00:04:15,580 --> 00:04:20,657
It points out that here at element number three it's undefined that times one,

65
00:04:20,657 --> 00:04:23,555
means there's one undefined element here.

66
00:04:23,555 --> 00:04:28,035
Here's element number 4, and then at the end it's reminding us or

67
00:04:28,035 --> 00:04:34,020
pointing out that there's this mapping of element -5 to the string elephant.

68
00:04:34,020 --> 00:04:38,140
So this should demonstrate to you that we're able to add and remove elements to

69
00:04:38,140 --> 00:04:43,370
an array, it's not fixed length like in many other programming languages.

70
00:04:43,370 --> 00:04:47,402
But we can instead think of it as some sort of list that's growing and

71
00:04:47,402 --> 00:04:48,975
shrinking dynamically.

72
00:04:48,975 --> 00:04:54,103
In an array, if we want to add elements we can either use the push or

73
00:04:54,103 --> 00:04:56,210
unshift functions.

74
00:04:56,210 --> 00:04:59,217
Here's an array with two elements, car and bike.

75
00:04:59,217 --> 00:05:01,665
And I can use push, in this case,

76
00:05:01,665 --> 00:05:06,490
pushing scooter this will add the element to the end of the array.

77
00:05:07,690 --> 00:05:11,807
Now if you're familiar with data structures you should know that push is

78
00:05:11,807 --> 00:05:15,732
the stack operation and we can think of the end of the array as a stack.

79
00:05:15,732 --> 00:05:17,230
We can push elements to it.

80
00:05:18,400 --> 00:05:22,673
Now if we print out myArray we'll see that it has car, bike, and scooter.

81
00:05:22,673 --> 00:05:27,424
I can add something to the front of the array, to the beginning of the array,

82
00:05:27,424 --> 00:05:29,800
using the function unshift.

83
00:05:29,800 --> 00:05:34,100
Unshift just allows us to put something at the front of the array.

84
00:05:34,100 --> 00:05:37,140
Here we're putting train at the front of the array.

85
00:05:37,140 --> 00:05:41,711
And now the array contains the four elements, train, car, bike, and scooter.

86
00:05:41,711 --> 00:05:45,295
In the same way that we can add and remove elements from the rear, or the end of

87
00:05:45,295 --> 00:05:49,840
the array, or the front, or the beginning of the array we can also remove them.

88
00:05:49,840 --> 00:05:51,730
This is the array from before.

89
00:05:51,730 --> 00:05:55,317
And I mentioned in the previous slide that the back of the array,

90
00:05:55,317 --> 00:05:59,250
the rear or the tail of the array, we can think of as a stack.

91
00:05:59,250 --> 00:06:04,152
If I can push things to add them, then I pop them to remove them.

92
00:06:04,152 --> 00:06:08,020
Pop will return and remove that last element.

93
00:06:08,020 --> 00:06:12,806
Now vehicle will become scooter because that's the last element of the array,

94
00:06:12,806 --> 00:06:14,962
and that element has been removed.

95
00:06:14,962 --> 00:06:19,613
I guess I think of shifting in terms of removing something from the beginning of

96
00:06:19,613 --> 00:06:20,388
the arrays,

97
00:06:20,388 --> 00:06:24,983
shifting everything over to the left and whatever was at the front falls off.

98
00:06:24,983 --> 00:06:29,750
Now vehicle is whatever was the first element of the array, which is train, and

99
00:06:29,750 --> 00:06:32,910
myArray still contains only car and bike.

100
00:06:32,910 --> 00:06:38,950
So we've seen how we can collect variables into a single variable, known as an array.

101
00:06:38,950 --> 00:06:43,642
An array does not have to have all the variables of the same type.

102
00:06:43,642 --> 00:06:47,530
And we can add elements and remove elements from the front and the rear.

103
00:06:47,530 --> 00:06:50,780
And we can even use indices that in other programming languages

104
00:06:50,780 --> 00:06:53,230
would be considered out of bounds.

105
00:06:53,230 --> 00:06:58,030
But what if we want to have a collection of associated variables and

106
00:06:58,030 --> 00:07:00,980
values, but not necessarily keep them in an array.

107
00:07:00,980 --> 00:07:06,110
But have semantically meaningful names for them In that case we would use objects.

108
00:07:06,110 --> 00:07:09,700
JavaScript objects are used to store key value pairs.

109
00:07:09,700 --> 00:07:14,710
And just as with arrays, values can be of any type, and

110
00:07:14,710 --> 00:07:19,740
a value of a JavaScript object can be an array or an object itself.

111
00:07:19,740 --> 00:07:26,272
We consider these values as properties and we can access them using the .property,

112
00:07:26,272 --> 00:07:32,344
the name of the property, or the array notation with the property as a string.

113
00:07:32,344 --> 00:07:36,371
In this case we're creating a variable named person, but

114
00:07:36,371 --> 00:07:41,860
we're using this object notation with the open and close curly braces.

115
00:07:41,860 --> 00:07:46,144
Now we have a key value pair which is the property name and

116
00:07:46,144 --> 00:07:49,344
it's value which is the string John Doe.

117
00:07:49,344 --> 00:07:53,004
Now it's important to remember that what we're creating here is an object,

118
00:07:53,004 --> 00:07:56,175
if you are familiar with object oriented programming languages.

119
00:07:56,175 --> 00:08:00,640
We're not creating a class here, we're not saying these are its fields but

120
00:08:00,640 --> 00:08:04,310
rather, we're saying these are the key value pairs.

121
00:08:04,310 --> 00:08:09,410
And I have to admit that I often accidentally put a semicolon here but

122
00:08:09,410 --> 00:08:13,270
what you need here is a comma to indicate that this is a list or

123
00:08:13,270 --> 00:08:19,370
a collection of key value pairs, a property, colon, and then it's value.

124
00:08:19,370 --> 00:08:20,590
The next property will be age.

125
00:08:20,590 --> 00:08:22,820
It's value is 25.

126
00:08:22,820 --> 00:08:26,428
We can have a property ismale with the value true.

127
00:08:26,428 --> 00:08:30,458
Here we have the property personality, which is an array of three elements,

128
00:08:30,458 --> 00:08:32,340
an array of three strings.

129
00:08:32,340 --> 00:08:36,978
And last, we have the property of this object, which is, itself, an object.

130
00:08:36,978 --> 00:08:43,850
The property is named company, that property has two properties, name and ID.

131
00:08:43,850 --> 00:08:47,380
If I want to access in this person object,

132
00:08:47,380 --> 00:08:52,540
its name attribute or its name property, I just use the name of the variable,

133
00:08:52,540 --> 00:08:57,190
dot the name of the property, now it returns value which is 25.

134
00:08:57,190 --> 00:09:01,640
I can also get a property using the sort of array notation

135
00:09:01,640 --> 00:09:03,580
with the name of the property as a string.

136
00:09:04,580 --> 00:09:06,880
So company is a string.

137
00:09:06,880 --> 00:09:10,890
But this will return person.company, which is this object here.

138
00:09:10,890 --> 00:09:15,680
It'll get its ID property and that's this number here.

139
00:09:15,680 --> 00:09:19,340
Now if you're familiar with object oriented programming you generally know

140
00:09:19,340 --> 00:09:24,190
that when I create the class, I say, these are the properties, the fields, or

141
00:09:24,190 --> 00:09:24,960
attributes.

142
00:09:24,960 --> 00:09:27,520
Then that's it, I can't add any more fields or properties or

143
00:09:27,520 --> 00:09:29,570
attributes to that class.

144
00:09:29,570 --> 00:09:33,367
However, in JavaScript, the object, we can almost think of as an array,

145
00:09:33,367 --> 00:09:35,376
in that we can keep adding things to it.

146
00:09:35,376 --> 00:09:39,640
And we can even add new properties after we've initialized it.

147
00:09:39,640 --> 00:09:42,660
In this example, I have a variable called pet.

148
00:09:42,660 --> 00:09:44,550
It's an object.

149
00:09:44,550 --> 00:09:49,861
It has a field called name, set to Cooper, and a field type, which is set to dog.

150
00:09:49,861 --> 00:09:52,840
Down here, I try to access its age.

151
00:09:52,840 --> 00:09:57,420
Well, pet does not have an age, so this would just return undefined.

152
00:09:57,420 --> 00:10:00,591
But in the next line, I set the age to 11.

153
00:10:00,591 --> 00:10:05,135
Now you note up here that there is no age property in this object so

154
00:10:05,135 --> 00:10:08,960
this will add that age property to the object.

155
00:10:08,960 --> 00:10:11,670
And now if I print it the age is 11.

156
00:10:11,670 --> 00:10:16,324
Likewise I can even do this using the array notation with the property name as

157
00:10:16,324 --> 00:10:16,988
a string.

158
00:10:16,988 --> 00:10:21,608
I'm adding the property called status using it as a string in this array

159
00:10:21,608 --> 00:10:22,379
notation.

160
00:10:22,379 --> 00:10:26,540
I'm setting it to be good boy, and when I print it, I get good boy.

161
00:10:26,540 --> 00:10:30,960
In summary, we've seen how we can collect variables together in arrays and objects.

162
00:10:30,960 --> 00:10:34,452
In arrays the elements are stored in an ordered sense but

163
00:10:34,452 --> 00:10:39,059
in objects we use key value pairs, and we can even add new key value pairs,

164
00:10:39,059 --> 00:10:42,730
new properties to the objects after we've created them.

